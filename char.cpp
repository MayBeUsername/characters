#include "GL/freeglut.h"
#include <array>
#include <iostream>

using namespace std;

const char N = 32, M = 38;

struct Color {
    GLfloat r, g, b;
};

struct PolyType {
    char type;
    float sx, sy, dx, dy;
    Color color;
};



void game();
void quad(PolyType poly);
void setpolystat(PolyType& poly, char type, float sx, float sy, float dx, float dy, GLfloat r, GLfloat g, GLfloat b);
void char1();
void setcolorchar1(Color color[]);
void char2();
void setcolorchar2();



int main(int argc, char* argv[])
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DEPTH | GLUT_DOUBLE | GLUT_RGBA);
    glutInitWindowPosition(100, 100);
    glutInitWindowSize(800, 800);
    glutCreateWindow("Game");

    glutDisplayFunc(game);
    glutMainLoop();
    return 0;
}

void game() {
    glClearColor(0.8, 0.8, 1, 1);
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    glLoadIdentity();
    glTranslatef(-0.8, -0.8, 0);
    glScalef(0.04, 0.04, 0);
    char1();

    glutSwapBuffers();
}



void char1() {

    Color color[13]{};
    PolyType poly;
    setcolorchar1(color);

    char pict[N][M]{
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 8, 8, 8, 7, 7, 7, 7, 8, 1, 1, 1, 9, 9, 9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 8, 8, 8, 7, 4, 4, 7, 3, 3, 3, 3, 7, 1, 8, 5, 5, 9, 9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 1, 8, 8, 8, 7, 3, 4, 4, 3, 7, 3, 3, 3, 7, 1, 8, 4, 4, 8, 5, 9, 1, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 1, 8, 5, 4, 7, 3, 3, 4, 7, 7, 7, 3, 3, 7, 1, 8, 4, 4, 8, 5, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 1, 5, 4, 8, 7, 7, 3, 4, 4, 7, 3, 3, 3, 8, 1, 9, 4, 4, 4, 5, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 1, 5, 4, 4, 8, 3, 3, 4, 4, 3, 4, 4, 4, 4, 1, 4, 4, 4, 4, 5, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 5, 4, 4, 3, 4, 4, 4, 4, 4, 3, 3, 3, 1, 4, 4, 4, 4, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 5, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 1, 4, 4, 4, 5, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 5, 5, 4, 4, 4, 4, 4, 4, 4, 8, 7, 7, 7, 7, 7, 7, 7, 7, 8, 1, 1, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 4, 4, 4, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 1, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 8, 7, 7, 7, 7, 7, 7, 7, 7, 2, 2, 2, 2, 2, 2, 2, 7, 7, 7, 7, 8, 1, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 1, 1, 8, 8, 7, 7, 7, 7, 7, 2, 2, 2, 2, 2, 7, 1, 8, 8, 8, 8, 9, 7, 2, 7, 7, 7, 8, 1, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 1, 8, 8, 8, 7, 7, 7, 7, 2, 2, 7, 5, 5, 1, 1, 8, 8, 7, 7, 7, 7, 8, 9, 1, 8, 8, 7, 8, 1, 1, 0, 0, 0},
        {0, 1, 1, 1, 1, 7, 7, 8, 7, 7, 7, 2, 8, 5, 5, 5, 5, 4, 1, 9, 8, 7, 7, 8, 2, 2, 7, 8, 5, 1, 8, 8, 8, 9, 9, 1, 1, 0},
        {1, 8, 8, 7, 7, 7, 7, 8, 7, 8, 9, 5, 5, 5, 5, 4, 4, 4, 1, 9, 8, 7, 7, 7, 7, 7, 7, 7, 6, 5, 9, 8, 8, 8, 8, 8, 9, 1},
        {0, 1, 1, 8, 8, 7, 8, 8, 9, 1, 5, 5, 5, 5, 4, 4, 4, 3, 3, 9, 8, 7, 7, 7, 8, 8, 7, 7, 6, 6, 5, 9, 8, 8, 8, 1, 1, 0},
        {0, 0, 0, 1, 9, 8, 8, 9, 1, 5, 5, 5, 5, 4, 4, 4, 3, 3, 3, 3, 8, 8, 7, 7, 8, 2, 7, 7, 6, 6, 5, 9, 8, 1, 1, 0, 0, 0},
        {0, 0, 0, 1, 9, 8, 9, 1, 1, 5, 5, 5, 4, 9, 4, 4, 4, 3, 3, 4, 4, 1, 1, 1, 8, 2, 1, 1, 6, 6, 5, 8, 1, 0, 0, 0, 0, 0},
        {0, 0, 0, 1, 9, 9,10, 1, 1, 5, 5, 4, 4, 4, 9, 9, 4, 4, 4, 4, 7, 3, 3, 1, 8, 7, 1, 1, 6, 6, 5, 1, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 1, 9,10,10,10, 1, 5, 5, 4, 4, 4, 9, 9, 9, 8, 8, 7, 3, 3, 3, 3, 7, 2, 2, 7, 6, 4, 5, 1, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 1, 9,10,10,10,10,10, 5, 4, 4, 4, 4, 9,12,12,11, 7, 3, 3, 3, 3, 3, 7, 7, 3, 3, 4, 5, 1, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 1, 9,10,10,10,10, 5, 4, 4, 4, 4, 8,12, 7,11, 7, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 1, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 1, 9, 9,10,10, 5, 5, 4, 4, 4, 9,12,11,12, 8, 4, 3, 3, 3, 3, 3, 3, 3, 3, 4, 1, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 1, 1, 9, 9, 5, 5, 5, 4, 4, 8, 8, 7, 7, 7, 7, 3, 3, 3, 3, 3, 3, 3, 3, 4, 1, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 5, 4, 3, 4, 8, 3, 3, 3, 3, 7, 7, 5, 3, 3, 3, 3, 3, 3, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 5, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 7, 3, 3, 3, 3, 3, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 3, 3, 3, 3, 4, 4, 4, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    };
        
    for (int i = 0; i < M; i++) {
        for (int j = 0; j < N; j++) {
            if (pict[j][i] != 0) {
                glPushMatrix();
                glTranslatef(i, j, 0);
                setpolystat(poly, 0.1, 0.1, 0, 1, 1, color[pict[j][i]].r, color[pict[j][i]].g, color[pict[j][i]].b);
                quad(poly);
                glPopMatrix();
            }
        }
    }
}

void setcolorchar1(Color color[]) {
    //чёрный
    color[1].r = 0;
    color[1].g = 0;
    color[1].b = 0;
    //белый
    color[2].r = 1;
    color[2].g = 1;
    color[2].b = 1;
    //бежевый
    color[3].r = 1;
    color[3].g = 0.976;
    color[3].b = 0.741;

    color[4].r = 0.698;
    color[4].g = 0.682;
    color[4].b = 0.518;

    color[5].r = 0.486;
    color[5].g = 0.475;
    color[5].b = 0.361;

    color[6].r = 0.341;
    color[6].g = 0.329;
    color[6].b = 0.251;
    //жёлтый
    color[7].r = 1;
    color[7].g = 0.949;
    color[7].b = 0;

    color[8].r = 0.698;
    color[8].g = 0.663;
    color[8].b = 0;

    color[9].r = 0.486;
    color[9].g = 0.463;
    color[9].b = 0;

    color[10].r = 0.341;
    color[10].g = 0.322;
    color[10].b = 0;
    //синий
    color[11].r = 0.6;
    color[11].g = 0.851;
    color[11].b = 0.918;

    color[12].r = 0.42;
    color[12].g = 0.592;
    color[12].b = 0.639;
}

void char2() {

}

void setcolorchar2() {

}

void setpolystat(PolyType& poly, char type, float sx, float sy, float dx, float dy, GLfloat r, GLfloat g, GLfloat b) {
    poly.sx = sx;
    poly.sy = sy;
    poly.dx = dx;
    poly.dy = dy;
    poly.color.r = r;
    poly.color.g = g;
    poly.color.b = b;
}

void quad(PolyType poly) {
    glBegin(GL_QUADS);
        glColor3f(poly.color.r, poly.color.g, poly.color.b);

        glVertex2f(poly.sx, poly.sy);
        poly.sx += poly.dx;
        glVertex2f(poly.sx, poly.sy);
        poly.sy += poly.dy;
        glVertex2f(poly.sx, poly.sy);
        poly.sx -= poly.dx;
        glVertex2f(poly.sx, poly.sy);
    glEnd();
}
